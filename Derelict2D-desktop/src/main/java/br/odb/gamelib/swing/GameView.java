/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package br.odb.gamelib.swing;

import br.odb.gamerendering.rendering.DisplayList;
import br.odb.gamerendering.rendering.GameRenderer;
import br.odb.gamerendering.rendering.RenderingNode;
import br.odb.gamerendering.rendering.SolidSquareRenderingNode;
import br.odb.utils.Color;
import br.odb.utils.Rect;
import java.awt.Graphics;

/**
 *
 * @author monty
 */
public class GameView extends javax.swing.JPanel {
    SwingCanvasRenderingContext renderingContext;
    private DisplayList renderingNode;
    private GameRenderer gameRenderer;
    private RenderingNode defaultRenderingNode;
    
    public GameView() {
        initComponents();

        renderingContext = new SwingCanvasRenderingContext();
        gameRenderer = new GameRenderer();
        gameRenderer.setCurrentRenderingContext(renderingContext);
        defaultRenderingNode = new SolidSquareRenderingNode(new Rect(10, 10, 100, 100), new Color(255, 0, 0));
    }
    
    protected RenderingNode getRenderingContent() {
        return renderingNode;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        renderingContext.prepareWithCanvas(g);

        if (renderingNode == null) {
            renderDefaultEmptyScreen();
            return;
        }

        renderingContext.currentOrigin.addTo(renderingNode.translate);

        gameRenderer.startRendering(renderingNode);

        while (gameRenderer.hasJobs() ) {
            gameRenderer.renderNext();
        }

        gameRenderer.resetRenderingContext();
        renderingContext.currentOrigin.addTo(renderingNode.translate.negated());
    }

    private void renderDefaultEmptyScreen() {
        if (defaultRenderingNode == null) {

            defaultRenderingNode = new SolidSquareRenderingNode( new Rect(100, 100, 200, 200), new Color(255, 255, 0));
        }
        gameRenderer.renderNode(defaultRenderingNode);

    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setBackground(new java.awt.Color(102, 0, 102));
        setForeground(new java.awt.Color(153, 0, 102));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    // End of variables declaration                   
    

    public void setRenderingContent(DisplayList displayList) {
        
        this.renderingNode = displayList;
        this.repaint();
    }

    public void setDefaultRenderingNode( DisplayList defaultNodeList ) {
        defaultRenderingNode = defaultNodeList.getItems()[ 0 ];
    }
}
